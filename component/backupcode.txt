import React, { useState, forwardRef, useImperativeHandle, useRef } from "react";
import { View, Image, StyleSheet, Dimensions, PanResponder } from "react-native";
import { ZoomIn } from "react-native-reanimated";
import Svg, { Path } from "react-native-svg";

const { height, width } = Dimensions.get("window");

const MapCanvas = forwardRef(({ currentImageIndex, isAnnotationMode, selectedColor }, ref) => {
  const images = [
    require("../assets/floorplan1.png"),
    require("../assets/T1.png"),
    require("../assets/T2.png"),
    require("../assets/T3.png"),
    require("../assets/T4.png"),
    require("../assets/T5.png"),
    require("../assets/T6.png"),
    require("../assets/T7.png"),
    require("../assets/T8.png"),
  ];

  const [paths, setPaths] = useState([]);
  const [currentPath, setCurrentPath] = useState("");
  const [scale, setScale] = useState(1);
  const [pan, setPan] = useState({ x: 0, y: 0 });
  const [offset, setOffset] = useState({ x: 0, y: 0 });
  const imageRef = useRef(null);
  const [imageBounds, setImageBounds] = useState({ x: 0, y: 0, width: 0, height: 0 });

  useImperativeHandle(ref, () => ({
    clearAnnotations: () => {
      setPaths([]);
      setCurrentPath("");
    },
    undoLastPath: () => {
      setPaths((prev) => prev.slice(0, -1));
    },
    // zoomIn: () => setScale((prev) => Math.min(prev * 1.2, 3)),
    // zoomOut: () => setScale((prev) => Math.max(prev * 0.8, 1)),
    zoomIn: () => {
      console.log("Zooming in");
      setScale((prev) => Math.min(prev * 1.2, 3));
    },
        // zoomOut: () => setScale((prev) => Math.max(prev * 0.8, 1)),
    zoomOut: () => {
      console.log("Zooming out");
      setScale((prev) => prev * 0.8);
    }
  }));

  const onImageLayout = () => {
    if (imageRef.current) {
      imageRef.current.measureInWindow((x, y, w, h) => {
        setImageBounds({ x, y, width: w, height: h });
      });
    }
  };

  const panResponder = PanResponder.create({
    onStartShouldSetPanResponder: () => true,
    onMoveShouldSetPanResponder: () => true,
    onPanResponderGrant: (evt) => {
      if (!isAnnotationMode) return;
      
      const { locationX, locationY } = evt.nativeEvent;
      const { x, y, width: w, height: h } = imageBounds;
      
      // Check if touch is within image bounds
      if (locationX >= 0 && locationX <= w && locationY >= 0 && locationY <= h) {
        const newPoint = `${locationX},${locationY}`;
        setCurrentPath(`M${newPoint}`);
      }
    },
    onPanResponderMove: (evt, gestureState) => {
      if (!isAnnotationMode) {
        // Handle panning logic
        const scaledDx = gestureState.dx / scale;
        const scaledDy = gestureState.dy / scale;
        
        const { scaledWidth, scaledHeight } = {
          scaledWidth: width * scale,
          scaledHeight: height * scale
        };

        const targetX = scaledDx + offset.x;
        const targetY = scaledDy + offset.y;

        const maxX = Math.max(0, (scaledWidth - width) / 2);
        const maxY = Math.max(0, (scaledHeight - height) / 2);

        setPan({
          x: Math.min(Math.max(targetX, -maxX), maxX),
          y: Math.min(Math.max(targetY, -maxY), maxY),
        });
        return;
      }

      const { locationX, locationY } = evt.nativeEvent;
      const { width: w, height: h } = imageBounds;
      
      if (locationX >= 0 && locationX <= w && locationY >= 0 && locationY <= h) {
        const newPoint = `${locationX},${locationY}`;
        setCurrentPath(prev => prev ? `${prev} L${newPoint}` : `M${newPoint}`);
      } else {
        if (currentPath) {
          setPaths(prev => [...prev, { path: currentPath, color: selectedColor }]);
          setCurrentPath("");
        }
      }
    },
    onPanResponderRelease: () => {
      if (isAnnotationMode && currentPath) {
        setPaths(prev => [...prev, { path: currentPath, color: selectedColor }]);
        setCurrentPath("");
      } else {
        setOffset(pan);
      }
    },
  });

  return (
    <View style={styles.container}>
      <Image
        ref={imageRef}
        source={images[currentImageIndex]}
        style={[
          styles.image,
          {
            transform: [{ scale }, { translateX: pan.x }, { translateY: pan.y }],
          },
        ]}
        resizeMode="contain"
        onLayout={onImageLayout}
      />

      <Svg style={[StyleSheet.absoluteFill, styles.svgOverlay]}>
        {paths.map((item, index) => (
          <Path
            key={index}
            d={item.path}
            stroke={item.color}
            strokeWidth={3}
            fill="none"
          />
        ))}
        {currentPath && (
          <Path d={currentPath} stroke={selectedColor} strokeWidth={3} fill="none" />
        )}
      </Svg>

      <View {...panResponder.panHandlers} style={styles.touchOverlay} />
    </View>
  );
});

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  image: {
    width: '100%',
    height: '100%',
  },
  svgOverlay: {
    pointerEvents: 'none',
  },
  touchOverlay: {
    ...StyleSheet.absoluteFillObject,
  },
});

export default MapCanvas;